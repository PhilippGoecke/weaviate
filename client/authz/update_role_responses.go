//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package authz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/weaviate/weaviate/entities/models"
)

// UpdateRoleReader is a Reader for the UpdateRole structure.
type UpdateRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateRoleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateRoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateRoleUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRoleCreated creates a UpdateRoleCreated with default headers values
func NewUpdateRoleCreated() *UpdateRoleCreated {
	return &UpdateRoleCreated{}
}

/*
UpdateRoleCreated describes a response with status code 201, with default header values.

Role update successfully
*/
type UpdateRoleCreated struct {
}

// IsSuccess returns true when this update role created response has a 2xx status code
func (o *UpdateRoleCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update role created response has a 3xx status code
func (o *UpdateRoleCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update role created response has a 4xx status code
func (o *UpdateRoleCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update role created response has a 5xx status code
func (o *UpdateRoleCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update role created response a status code equal to that given
func (o *UpdateRoleCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update role created response
func (o *UpdateRoleCreated) Code() int {
	return 201
}

func (o *UpdateRoleCreated) Error() string {
	return fmt.Sprintf("[PATCH /authz/roles][%d] updateRoleCreated ", 201)
}

func (o *UpdateRoleCreated) String() string {
	return fmt.Sprintf("[PATCH /authz/roles][%d] updateRoleCreated ", 201)
}

func (o *UpdateRoleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRoleUnauthorized creates a UpdateRoleUnauthorized with default headers values
func NewUpdateRoleUnauthorized() *UpdateRoleUnauthorized {
	return &UpdateRoleUnauthorized{}
}

/*
UpdateRoleUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type UpdateRoleUnauthorized struct {
}

// IsSuccess returns true when this update role unauthorized response has a 2xx status code
func (o *UpdateRoleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update role unauthorized response has a 3xx status code
func (o *UpdateRoleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update role unauthorized response has a 4xx status code
func (o *UpdateRoleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update role unauthorized response has a 5xx status code
func (o *UpdateRoleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update role unauthorized response a status code equal to that given
func (o *UpdateRoleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update role unauthorized response
func (o *UpdateRoleUnauthorized) Code() int {
	return 401
}

func (o *UpdateRoleUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /authz/roles][%d] updateRoleUnauthorized ", 401)
}

func (o *UpdateRoleUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /authz/roles][%d] updateRoleUnauthorized ", 401)
}

func (o *UpdateRoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRoleForbidden creates a UpdateRoleForbidden with default headers values
func NewUpdateRoleForbidden() *UpdateRoleForbidden {
	return &UpdateRoleForbidden{}
}

/*
UpdateRoleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateRoleForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update role forbidden response has a 2xx status code
func (o *UpdateRoleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update role forbidden response has a 3xx status code
func (o *UpdateRoleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update role forbidden response has a 4xx status code
func (o *UpdateRoleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update role forbidden response has a 5xx status code
func (o *UpdateRoleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update role forbidden response a status code equal to that given
func (o *UpdateRoleForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update role forbidden response
func (o *UpdateRoleForbidden) Code() int {
	return 403
}

func (o *UpdateRoleForbidden) Error() string {
	return fmt.Sprintf("[PATCH /authz/roles][%d] updateRoleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRoleForbidden) String() string {
	return fmt.Sprintf("[PATCH /authz/roles][%d] updateRoleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRoleForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleUnprocessableEntity creates a UpdateRoleUnprocessableEntity with default headers values
func NewUpdateRoleUnprocessableEntity() *UpdateRoleUnprocessableEntity {
	return &UpdateRoleUnprocessableEntity{}
}

/*
UpdateRoleUnprocessableEntity describes a response with status code 422, with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?
*/
type UpdateRoleUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update role unprocessable entity response has a 2xx status code
func (o *UpdateRoleUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update role unprocessable entity response has a 3xx status code
func (o *UpdateRoleUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update role unprocessable entity response has a 4xx status code
func (o *UpdateRoleUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update role unprocessable entity response has a 5xx status code
func (o *UpdateRoleUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update role unprocessable entity response a status code equal to that given
func (o *UpdateRoleUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update role unprocessable entity response
func (o *UpdateRoleUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateRoleUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /authz/roles][%d] updateRoleUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateRoleUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /authz/roles][%d] updateRoleUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateRoleUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateRoleUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleInternalServerError creates a UpdateRoleInternalServerError with default headers values
func NewUpdateRoleInternalServerError() *UpdateRoleInternalServerError {
	return &UpdateRoleInternalServerError{}
}

/*
UpdateRoleInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type UpdateRoleInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update role internal server error response has a 2xx status code
func (o *UpdateRoleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update role internal server error response has a 3xx status code
func (o *UpdateRoleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update role internal server error response has a 4xx status code
func (o *UpdateRoleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update role internal server error response has a 5xx status code
func (o *UpdateRoleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update role internal server error response a status code equal to that given
func (o *UpdateRoleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update role internal server error response
func (o *UpdateRoleInternalServerError) Code() int {
	return 500
}

func (o *UpdateRoleInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /authz/roles][%d] updateRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRoleInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /authz/roles][%d] updateRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRoleInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateRoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateRoleBody RBAC role update request
swagger:model UpdateRoleBody
*/
type UpdateRoleBody struct {

	// the role that the key/user assigned to
	// Required: true
	Permissions []*models.Permission `json:"permissions"`

	// the role that the key/user assigned to
	// Required: true
	Role *string `json:"role"`
}

// Validate validates this update role body
func (o *UpdateRoleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateRoleBody) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"permissions", "body", o.Permissions); err != nil {
		return err
	}

	for i := 0; i < len(o.Permissions); i++ {
		if swag.IsZero(o.Permissions[i]) { // not required
			continue
		}

		if o.Permissions[i] != nil {
			if err := o.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateRoleBody) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update role body based on the context it is used
func (o *UpdateRoleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateRoleBody) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Permissions); i++ {

		if o.Permissions[i] != nil {
			if err := o.Permissions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateRoleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateRoleBody) UnmarshalBinary(b []byte) error {
	var res UpdateRoleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
