//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package authz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// AddRoleReader is a Reader for the AddRole structure.
type AddRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddRoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddRoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddRoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddRoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddRoleOK creates a AddRoleOK with default headers values
func NewAddRoleOK() *AddRoleOK {
	return &AddRoleOK{}
}

/*
AddRoleOK describes a response with status code 200, with default header values.

Role assigned successfully
*/
type AddRoleOK struct {
}

// IsSuccess returns true when this add role o k response has a 2xx status code
func (o *AddRoleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add role o k response has a 3xx status code
func (o *AddRoleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add role o k response has a 4xx status code
func (o *AddRoleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add role o k response has a 5xx status code
func (o *AddRoleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add role o k response a status code equal to that given
func (o *AddRoleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add role o k response
func (o *AddRoleOK) Code() int {
	return 200
}

func (o *AddRoleOK) Error() string {
	return fmt.Sprintf("[POST /authz/role][%d] addRoleOK ", 200)
}

func (o *AddRoleOK) String() string {
	return fmt.Sprintf("[POST /authz/role][%d] addRoleOK ", 200)
}

func (o *AddRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRoleBadRequest creates a AddRoleBadRequest with default headers values
func NewAddRoleBadRequest() *AddRoleBadRequest {
	return &AddRoleBadRequest{}
}

/*
AddRoleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AddRoleBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add role bad request response has a 2xx status code
func (o *AddRoleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add role bad request response has a 3xx status code
func (o *AddRoleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add role bad request response has a 4xx status code
func (o *AddRoleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add role bad request response has a 5xx status code
func (o *AddRoleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add role bad request response a status code equal to that given
func (o *AddRoleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add role bad request response
func (o *AddRoleBadRequest) Code() int {
	return 400
}

func (o *AddRoleBadRequest) Error() string {
	return fmt.Sprintf("[POST /authz/role][%d] addRoleBadRequest  %+v", 400, o.Payload)
}

func (o *AddRoleBadRequest) String() string {
	return fmt.Sprintf("[POST /authz/role][%d] addRoleBadRequest  %+v", 400, o.Payload)
}

func (o *AddRoleBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddRoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddRoleUnauthorized creates a AddRoleUnauthorized with default headers values
func NewAddRoleUnauthorized() *AddRoleUnauthorized {
	return &AddRoleUnauthorized{}
}

/*
AddRoleUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type AddRoleUnauthorized struct {
}

// IsSuccess returns true when this add role unauthorized response has a 2xx status code
func (o *AddRoleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add role unauthorized response has a 3xx status code
func (o *AddRoleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add role unauthorized response has a 4xx status code
func (o *AddRoleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add role unauthorized response has a 5xx status code
func (o *AddRoleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add role unauthorized response a status code equal to that given
func (o *AddRoleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add role unauthorized response
func (o *AddRoleUnauthorized) Code() int {
	return 401
}

func (o *AddRoleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /authz/role][%d] addRoleUnauthorized ", 401)
}

func (o *AddRoleUnauthorized) String() string {
	return fmt.Sprintf("[POST /authz/role][%d] addRoleUnauthorized ", 401)
}

func (o *AddRoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRoleForbidden creates a AddRoleForbidden with default headers values
func NewAddRoleForbidden() *AddRoleForbidden {
	return &AddRoleForbidden{}
}

/*
AddRoleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddRoleForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add role forbidden response has a 2xx status code
func (o *AddRoleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add role forbidden response has a 3xx status code
func (o *AddRoleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add role forbidden response has a 4xx status code
func (o *AddRoleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add role forbidden response has a 5xx status code
func (o *AddRoleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add role forbidden response a status code equal to that given
func (o *AddRoleForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add role forbidden response
func (o *AddRoleForbidden) Code() int {
	return 403
}

func (o *AddRoleForbidden) Error() string {
	return fmt.Sprintf("[POST /authz/role][%d] addRoleForbidden  %+v", 403, o.Payload)
}

func (o *AddRoleForbidden) String() string {
	return fmt.Sprintf("[POST /authz/role][%d] addRoleForbidden  %+v", 403, o.Payload)
}

func (o *AddRoleForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddRoleNotFound creates a AddRoleNotFound with default headers values
func NewAddRoleNotFound() *AddRoleNotFound {
	return &AddRoleNotFound{}
}

/*
AddRoleNotFound describes a response with status code 404, with default header values.

role is not found.
*/
type AddRoleNotFound struct {
}

// IsSuccess returns true when this add role not found response has a 2xx status code
func (o *AddRoleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add role not found response has a 3xx status code
func (o *AddRoleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add role not found response has a 4xx status code
func (o *AddRoleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add role not found response has a 5xx status code
func (o *AddRoleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add role not found response a status code equal to that given
func (o *AddRoleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add role not found response
func (o *AddRoleNotFound) Code() int {
	return 404
}

func (o *AddRoleNotFound) Error() string {
	return fmt.Sprintf("[POST /authz/role][%d] addRoleNotFound ", 404)
}

func (o *AddRoleNotFound) String() string {
	return fmt.Sprintf("[POST /authz/role][%d] addRoleNotFound ", 404)
}

func (o *AddRoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRoleInternalServerError creates a AddRoleInternalServerError with default headers values
func NewAddRoleInternalServerError() *AddRoleInternalServerError {
	return &AddRoleInternalServerError{}
}

/*
AddRoleInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type AddRoleInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add role internal server error response has a 2xx status code
func (o *AddRoleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add role internal server error response has a 3xx status code
func (o *AddRoleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add role internal server error response has a 4xx status code
func (o *AddRoleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add role internal server error response has a 5xx status code
func (o *AddRoleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add role internal server error response a status code equal to that given
func (o *AddRoleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add role internal server error response
func (o *AddRoleInternalServerError) Code() int {
	return 500
}

func (o *AddRoleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /authz/role][%d] addRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *AddRoleInternalServerError) String() string {
	return fmt.Sprintf("[POST /authz/role][%d] addRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *AddRoleInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddRoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
