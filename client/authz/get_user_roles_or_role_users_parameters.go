//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package authz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetUserRolesOrRoleUsersParams creates a new GetUserRolesOrRoleUsersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetUserRolesOrRoleUsersParams() *GetUserRolesOrRoleUsersParams {
	return &GetUserRolesOrRoleUsersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserRolesOrRoleUsersParamsWithTimeout creates a new GetUserRolesOrRoleUsersParams object
// with the ability to set a timeout on a request.
func NewGetUserRolesOrRoleUsersParamsWithTimeout(timeout time.Duration) *GetUserRolesOrRoleUsersParams {
	return &GetUserRolesOrRoleUsersParams{
		timeout: timeout,
	}
}

// NewGetUserRolesOrRoleUsersParamsWithContext creates a new GetUserRolesOrRoleUsersParams object
// with the ability to set a context for a request.
func NewGetUserRolesOrRoleUsersParamsWithContext(ctx context.Context) *GetUserRolesOrRoleUsersParams {
	return &GetUserRolesOrRoleUsersParams{
		Context: ctx,
	}
}

// NewGetUserRolesOrRoleUsersParamsWithHTTPClient creates a new GetUserRolesOrRoleUsersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetUserRolesOrRoleUsersParamsWithHTTPClient(client *http.Client) *GetUserRolesOrRoleUsersParams {
	return &GetUserRolesOrRoleUsersParams{
		HTTPClient: client,
	}
}

/*
GetUserRolesOrRoleUsersParams contains all the parameters to send to the API endpoint

	for the get user roles or role users operation.

	Typically these are written to a http.Request.
*/
type GetUserRolesOrRoleUsersParams struct {

	/* Role.

	   the role that the key or user assigned to
	*/
	Role *string

	/* User.

	   the user or key assigned to a role
	*/
	User *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get user roles or role users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUserRolesOrRoleUsersParams) WithDefaults() *GetUserRolesOrRoleUsersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get user roles or role users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUserRolesOrRoleUsersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get user roles or role users params
func (o *GetUserRolesOrRoleUsersParams) WithTimeout(timeout time.Duration) *GetUserRolesOrRoleUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get user roles or role users params
func (o *GetUserRolesOrRoleUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get user roles or role users params
func (o *GetUserRolesOrRoleUsersParams) WithContext(ctx context.Context) *GetUserRolesOrRoleUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get user roles or role users params
func (o *GetUserRolesOrRoleUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get user roles or role users params
func (o *GetUserRolesOrRoleUsersParams) WithHTTPClient(client *http.Client) *GetUserRolesOrRoleUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get user roles or role users params
func (o *GetUserRolesOrRoleUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRole adds the role to the get user roles or role users params
func (o *GetUserRolesOrRoleUsersParams) WithRole(role *string) *GetUserRolesOrRoleUsersParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the get user roles or role users params
func (o *GetUserRolesOrRoleUsersParams) SetRole(role *string) {
	o.Role = role
}

// WithUser adds the user to the get user roles or role users params
func (o *GetUserRolesOrRoleUsersParams) WithUser(user *string) *GetUserRolesOrRoleUsersParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the get user roles or role users params
func (o *GetUserRolesOrRoleUsersParams) SetUser(user *string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserRolesOrRoleUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Role != nil {

		// query param role
		var qrRole string

		if o.Role != nil {
			qrRole = *o.Role
		}
		qRole := qrRole
		if qRole != "" {

			if err := r.SetQueryParam("role", qRole); err != nil {
				return err
			}
		}
	}

	if o.User != nil {

		// query param user
		var qrUser string

		if o.User != nil {
			qrUser = *o.User
		}
		qUser := qrUser
		if qUser != "" {

			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
