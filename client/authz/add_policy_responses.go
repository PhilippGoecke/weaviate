//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package authz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// AddPolicyReader is a Reader for the AddPolicy structure.
type AddPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAddPolicyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddPolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddPolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAddPolicyUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddPolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddPolicyCreated creates a AddPolicyCreated with default headers values
func NewAddPolicyCreated() *AddPolicyCreated {
	return &AddPolicyCreated{}
}

/*
AddPolicyCreated describes a response with status code 201, with default header values.

Policy added successfully
*/
type AddPolicyCreated struct {
}

// IsSuccess returns true when this add policy created response has a 2xx status code
func (o *AddPolicyCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add policy created response has a 3xx status code
func (o *AddPolicyCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add policy created response has a 4xx status code
func (o *AddPolicyCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add policy created response has a 5xx status code
func (o *AddPolicyCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add policy created response a status code equal to that given
func (o *AddPolicyCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the add policy created response
func (o *AddPolicyCreated) Code() int {
	return 201
}

func (o *AddPolicyCreated) Error() string {
	return fmt.Sprintf("[POST /authz/policy][%d] addPolicyCreated ", 201)
}

func (o *AddPolicyCreated) String() string {
	return fmt.Sprintf("[POST /authz/policy][%d] addPolicyCreated ", 201)
}

func (o *AddPolicyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddPolicyUnauthorized creates a AddPolicyUnauthorized with default headers values
func NewAddPolicyUnauthorized() *AddPolicyUnauthorized {
	return &AddPolicyUnauthorized{}
}

/*
AddPolicyUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type AddPolicyUnauthorized struct {
}

// IsSuccess returns true when this add policy unauthorized response has a 2xx status code
func (o *AddPolicyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add policy unauthorized response has a 3xx status code
func (o *AddPolicyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add policy unauthorized response has a 4xx status code
func (o *AddPolicyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add policy unauthorized response has a 5xx status code
func (o *AddPolicyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add policy unauthorized response a status code equal to that given
func (o *AddPolicyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add policy unauthorized response
func (o *AddPolicyUnauthorized) Code() int {
	return 401
}

func (o *AddPolicyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /authz/policy][%d] addPolicyUnauthorized ", 401)
}

func (o *AddPolicyUnauthorized) String() string {
	return fmt.Sprintf("[POST /authz/policy][%d] addPolicyUnauthorized ", 401)
}

func (o *AddPolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddPolicyForbidden creates a AddPolicyForbidden with default headers values
func NewAddPolicyForbidden() *AddPolicyForbidden {
	return &AddPolicyForbidden{}
}

/*
AddPolicyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddPolicyForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add policy forbidden response has a 2xx status code
func (o *AddPolicyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add policy forbidden response has a 3xx status code
func (o *AddPolicyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add policy forbidden response has a 4xx status code
func (o *AddPolicyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add policy forbidden response has a 5xx status code
func (o *AddPolicyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add policy forbidden response a status code equal to that given
func (o *AddPolicyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add policy forbidden response
func (o *AddPolicyForbidden) Code() int {
	return 403
}

func (o *AddPolicyForbidden) Error() string {
	return fmt.Sprintf("[POST /authz/policy][%d] addPolicyForbidden  %+v", 403, o.Payload)
}

func (o *AddPolicyForbidden) String() string {
	return fmt.Sprintf("[POST /authz/policy][%d] addPolicyForbidden  %+v", 403, o.Payload)
}

func (o *AddPolicyForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddPolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddPolicyUnprocessableEntity creates a AddPolicyUnprocessableEntity with default headers values
func NewAddPolicyUnprocessableEntity() *AddPolicyUnprocessableEntity {
	return &AddPolicyUnprocessableEntity{}
}

/*
AddPolicyUnprocessableEntity describes a response with status code 422, with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?
*/
type AddPolicyUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add policy unprocessable entity response has a 2xx status code
func (o *AddPolicyUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add policy unprocessable entity response has a 3xx status code
func (o *AddPolicyUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add policy unprocessable entity response has a 4xx status code
func (o *AddPolicyUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this add policy unprocessable entity response has a 5xx status code
func (o *AddPolicyUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this add policy unprocessable entity response a status code equal to that given
func (o *AddPolicyUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the add policy unprocessable entity response
func (o *AddPolicyUnprocessableEntity) Code() int {
	return 422
}

func (o *AddPolicyUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /authz/policy][%d] addPolicyUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AddPolicyUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /authz/policy][%d] addPolicyUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AddPolicyUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddPolicyUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddPolicyInternalServerError creates a AddPolicyInternalServerError with default headers values
func NewAddPolicyInternalServerError() *AddPolicyInternalServerError {
	return &AddPolicyInternalServerError{}
}

/*
AddPolicyInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type AddPolicyInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add policy internal server error response has a 2xx status code
func (o *AddPolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add policy internal server error response has a 3xx status code
func (o *AddPolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add policy internal server error response has a 4xx status code
func (o *AddPolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add policy internal server error response has a 5xx status code
func (o *AddPolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add policy internal server error response a status code equal to that given
func (o *AddPolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add policy internal server error response
func (o *AddPolicyInternalServerError) Code() int {
	return 500
}

func (o *AddPolicyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /authz/policy][%d] addPolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *AddPolicyInternalServerError) String() string {
	return fmt.Sprintf("[POST /authz/policy][%d] addPolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *AddPolicyInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddPolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
