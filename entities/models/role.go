//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Role role
//
// swagger:model Role
type Role struct {

	// HTTP Method like actions the user/key can perform on an object
	// Required: true
	// Enum: [READ LIST WRITE DELETE]
	Action *string `json:"action"`

	// level this role has permission to
	// Required: true
	// Enum: [Database Collection Tenant Object]
	Level *string `json:"level"`

	// role name
	// Required: true
	Name *string `json:"name"`

	// comma separated string. if a specific object(Collection name, Tenant name, Object Name) has a name otherwise, if left empty it will be ALL or *
	ObjectName *string `json:"object_name,omitempty"`
}

// Validate validates this role
func (m *Role) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var roleTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ","LIST","WRITE","DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleTypeActionPropEnum = append(roleTypeActionPropEnum, v)
	}
}

const (

	// RoleActionREAD captures enum value "READ"
	RoleActionREAD string = "READ"

	// RoleActionLIST captures enum value "LIST"
	RoleActionLIST string = "LIST"

	// RoleActionWRITE captures enum value "WRITE"
	RoleActionWRITE string = "WRITE"

	// RoleActionDELETE captures enum value "DELETE"
	RoleActionDELETE string = "DELETE"
)

// prop value enum
func (m *Role) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, roleTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Role) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

var roleTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Database","Collection","Tenant","Object"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleTypeLevelPropEnum = append(roleTypeLevelPropEnum, v)
	}
}

const (

	// RoleLevelDatabase captures enum value "Database"
	RoleLevelDatabase string = "Database"

	// RoleLevelCollection captures enum value "Collection"
	RoleLevelCollection string = "Collection"

	// RoleLevelTenant captures enum value "Tenant"
	RoleLevelTenant string = "Tenant"

	// RoleLevelObject captures enum value "Object"
	RoleLevelObject string = "Object"
)

// prop value enum
func (m *Role) validateLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, roleTypeLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Role) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", *m.Level); err != nil {
		return err
	}

	return nil
}

func (m *Role) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this role based on context it is used
func (m *Role) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Role) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Role) UnmarshalBinary(b []byte) error {
	var res Role
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
