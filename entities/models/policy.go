//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Policy policy
//
// swagger:model Policy
type Policy struct {

	// HTTP Method like actions the user/key can perform on an object
	// Enum: [GET POST DELETE PUT PATCH HEAD OPTIONS]
	Action string `json:"action,omitempty"`

	// object the user/key can do an action on
	Object string `json:"object,omitempty"`

	// role to assigned to key or user
	Role string `json:"role,omitempty"`
}

// Validate validates this policy
func (m *Policy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var policyTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GET","POST","DELETE","PUT","PATCH","HEAD","OPTIONS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyTypeActionPropEnum = append(policyTypeActionPropEnum, v)
	}
}

const (

	// PolicyActionGET captures enum value "GET"
	PolicyActionGET string = "GET"

	// PolicyActionPOST captures enum value "POST"
	PolicyActionPOST string = "POST"

	// PolicyActionDELETE captures enum value "DELETE"
	PolicyActionDELETE string = "DELETE"

	// PolicyActionPUT captures enum value "PUT"
	PolicyActionPUT string = "PUT"

	// PolicyActionPATCH captures enum value "PATCH"
	PolicyActionPATCH string = "PATCH"

	// PolicyActionHEAD captures enum value "HEAD"
	PolicyActionHEAD string = "HEAD"

	// PolicyActionOPTIONS captures enum value "OPTIONS"
	PolicyActionOPTIONS string = "OPTIONS"
)

// prop value enum
func (m *Policy) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Policy) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this policy based on context it is used
func (m *Policy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Policy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Policy) UnmarshalBinary(b []byte) error {
	var res Policy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
