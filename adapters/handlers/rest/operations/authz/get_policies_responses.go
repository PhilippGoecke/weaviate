//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package authz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/weaviate/weaviate/entities/models"
)

// GetPoliciesOKCode is the HTTP code returned for type GetPoliciesOK
const GetPoliciesOKCode int = 200

/*
GetPoliciesOK Successful response.

swagger:response getPoliciesOK
*/
type GetPoliciesOK struct {

	/*
	  In: Body
	*/
	Payload models.PoliciesListResponse `json:"body,omitempty"`
}

// NewGetPoliciesOK creates GetPoliciesOK with default headers values
func NewGetPoliciesOK() *GetPoliciesOK {

	return &GetPoliciesOK{}
}

// WithPayload adds the payload to the get policies o k response
func (o *GetPoliciesOK) WithPayload(payload models.PoliciesListResponse) *GetPoliciesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get policies o k response
func (o *GetPoliciesOK) SetPayload(payload models.PoliciesListResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPoliciesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.PoliciesListResponse{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetPoliciesBadRequestCode is the HTTP code returned for type GetPoliciesBadRequest
const GetPoliciesBadRequestCode int = 400

/*
GetPoliciesBadRequest Malformed request.

swagger:response getPoliciesBadRequest
*/
type GetPoliciesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetPoliciesBadRequest creates GetPoliciesBadRequest with default headers values
func NewGetPoliciesBadRequest() *GetPoliciesBadRequest {

	return &GetPoliciesBadRequest{}
}

// WithPayload adds the payload to the get policies bad request response
func (o *GetPoliciesBadRequest) WithPayload(payload *models.ErrorResponse) *GetPoliciesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get policies bad request response
func (o *GetPoliciesBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPoliciesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPoliciesUnauthorizedCode is the HTTP code returned for type GetPoliciesUnauthorized
const GetPoliciesUnauthorizedCode int = 401

/*
GetPoliciesUnauthorized Unauthorized or invalid credentials.

swagger:response getPoliciesUnauthorized
*/
type GetPoliciesUnauthorized struct {
}

// NewGetPoliciesUnauthorized creates GetPoliciesUnauthorized with default headers values
func NewGetPoliciesUnauthorized() *GetPoliciesUnauthorized {

	return &GetPoliciesUnauthorized{}
}

// WriteResponse to the client
func (o *GetPoliciesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// GetPoliciesForbiddenCode is the HTTP code returned for type GetPoliciesForbidden
const GetPoliciesForbiddenCode int = 403

/*
GetPoliciesForbidden Forbidden

swagger:response getPoliciesForbidden
*/
type GetPoliciesForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetPoliciesForbidden creates GetPoliciesForbidden with default headers values
func NewGetPoliciesForbidden() *GetPoliciesForbidden {

	return &GetPoliciesForbidden{}
}

// WithPayload adds the payload to the get policies forbidden response
func (o *GetPoliciesForbidden) WithPayload(payload *models.ErrorResponse) *GetPoliciesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get policies forbidden response
func (o *GetPoliciesForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPoliciesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPoliciesInternalServerErrorCode is the HTTP code returned for type GetPoliciesInternalServerError
const GetPoliciesInternalServerErrorCode int = 500

/*
GetPoliciesInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response getPoliciesInternalServerError
*/
type GetPoliciesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetPoliciesInternalServerError creates GetPoliciesInternalServerError with default headers values
func NewGetPoliciesInternalServerError() *GetPoliciesInternalServerError {

	return &GetPoliciesInternalServerError{}
}

// WithPayload adds the payload to the get policies internal server error response
func (o *GetPoliciesInternalServerError) WithPayload(payload *models.ErrorResponse) *GetPoliciesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get policies internal server error response
func (o *GetPoliciesInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPoliciesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
